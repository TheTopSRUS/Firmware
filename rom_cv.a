;/*****************************************************
;This program was produced by the
;CodeWizardAVR V1.25.5 Professional
;Automatic Program Generator
;© Copyright 1998-2007 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project :
;Version :
;Date    : 01.10.2009
;Author  : F4CG
;Company : F4CG
;Comments:
;
;
;Chip type           : ATmega8
;Program type        : Application
;Clock frequency     : 16,000000 MHz
;Memory model        : Small
;External SRAM size  : 0
;Data Stack size     : 256
;*****************************************************/
;
;#include <mega8.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x80
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x70
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x60
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x70
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;
;#define RXB8 1
;#define TXB8 0
;#define UPE 2
;#define OVR 3
;#define FE 4
;#define UDRE 5
;#define RXC 7
;
;#define FRAMING_ERROR (1<<FE)
;#define PARITY_ERROR (1<<UPE)
;#define DATA_OVERRUN (1<<OVR)
;#define DATA_REGISTER_EMPTY (1<<UDRE)
;#define RX_COMPLETE (1<<RXC)
;
;// USART Receiver buffer
;#define RX_BUFFER_SIZE 100
;char rx_buffer[RX_BUFFER_SIZE];
;
;#if RX_BUFFER_SIZE<256
;unsigned char rx_wr_index,rx_rd_index,rx_counter;
;#else
;unsigned int rx_wr_index,rx_rd_index,rx_counter;
;#endif
;
;// This flag is set on USART Receiver buffer overflow
;bit rx_buffer_overflow;
;
;// USART Receiver interrupt service routine
;interrupt [USART_RXC] void usart_rx_isr(void)
; 0000 0037 {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 0038 char status,data;
; 0000 0039 status=UCSRA;
;PCODE: $0000000F VOL: 0
;	status -> R17
;	data -> R16
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
; 0000 003A data=UDR;
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
; 0000 003B if ((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN))==0)
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
; 0000 003C    {
; 0000 003D    rx_buffer[rx_wr_index]=data;
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
; 0000 003E    if (++rx_wr_index == RX_BUFFER_SIZE) rx_wr_index=0;
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
; 0000 003F    if (++rx_counter == RX_BUFFER_SIZE)
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
; 0000 0040       {
; 0000 0041       rx_counter=0;
;PCODE: $00000025 VOL: 0
; 0000 0042       rx_buffer_overflow=1;
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
; 0000 0043       };
;PCODE: $00000029 VOL: 0
; 0000 0044    };
;PCODE: $0000002A VOL: 0
; 0000 0045 }
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;
;#ifndef _DEBUG_TERMINAL_IO_
;// Get a character from the USART Receiver buffer
;#define _ALTERNATE_GETCHAR_
;#pragma used+
;char getchar(void)
; 0000 004C {
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
; 0000 004D char data;
; 0000 004E while (rx_counter==0);
;PCODE: $00000031 VOL: 0
;	data -> R17
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
; 0000 004F data=rx_buffer[rx_rd_index];
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
; 0000 0050 if (++rx_rd_index == RX_BUFFER_SIZE) rx_rd_index=0;
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
; 0000 0051 #asm("cli")
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
	cli
;PCODE: $00000042 VOL: 0
; 0000 0052 --rx_counter;
;PCODE: $00000043 VOL: 0
; 0000 0053 #asm("sei")
;PCODE: $00000044 VOL: 0
	sei
;PCODE: $00000045 VOL: 0
; 0000 0054 return data;
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
; 0000 0055 }
;PCODE: $00000049 VOL: 0
;#pragma used-
;#endif
;
;// Standard Input/Output functions
;#include <stdio.h>
;
;#include <delay.h>
;
;
;#define FIRST_ADC_INPUT 2
;#define LAST_ADC_INPUT 3
;unsigned char adc_data[LAST_ADC_INPUT-FIRST_ADC_INPUT+1];
;#define ADC_VREF_TYPE 0x20
;
;// ADC interrupt service routine
;// with auto input scanning
;interrupt [ADC_INT] void adc_isr(void)
; 0000 0067 {
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
; 0000 0068 static unsigned char input_index=0;
; 0000 0069 // Read the 8 most significant bits
; 0000 006A // of the AD conversion result
; 0000 006B adc_data[input_index]=ADCH;
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
; 0000 006C // Select next ADC input
; 0000 006D if (++input_index > (LAST_ADC_INPUT-FIRST_ADC_INPUT))
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
; 0000 006E    input_index=0;
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
; 0000 006F ADMUX=(FIRST_ADC_INPUT | (ADC_VREF_TYPE & 0xff))+input_index;
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
; 0000 0070 // Delay needed for the stabilization of the ADC input voltage
; 0000 0071 delay_us(10);
;PCODE: $0000005C VOL: 0
; 0000 0072 // Start the AD conversion
; 0000 0073 ADCSRA|=0x40;
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
; 0000 0074 }
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
;
;
;
;// Declare your global variables here
;
;unsigned char On = 1;
;unsigned char Off = 0;
;unsigned char Fan1_Status;
;unsigned char Fan2_Status;
;unsigned char Fan3_Status;
;unsigned  int PWM1_Value = 0x3FF;;
;unsigned  int PWM2_Value = 0x3FF;;

	.DSEG
;unsigned char Tmp1_Value;
;unsigned char Tmp2_Value;
;
;
;
;unsigned char enterchar(void)
; 0000 0087 {

	.CSEG
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
; 0000 0088 while(!rx_counter);
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
; 0000 0089 return getchar();
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
; 0000 008A }
;PCODE: $0000006B VOL: 0
;
;unsigned int enterdata(unsigned char cnt)
; 0000 008D {
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
; 0000 008E unsigned char i = 0;
; 0000 008F unsigned int k = 0;
; 0000 0090 unsigned char a;
; 0000 0091 
; 0000 0092 for (i=1; i<= cnt; i++)
;PCODE: $0000006E VOL: 0
;	cnt -> Y+4
;	i -> R17
;	k -> R18,R19
;	a -> R16
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
; 0000 0093 {
; 0000 0094 a=enterchar();
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
; 0000 0095 
; 0000 0096 switch (a)
;PCODE: $0000007E VOL: 0
; 0000 0097 {
; 0000 0098  case '1': { k = k*10+1; break;}
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
; 0000 0099  case '2': { k = k*10+2; break;}
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
; 0000 009A  case '3': { k = k*10+3; break;}
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
; 0000 009B  case '4': { k = k*10+4; break;}
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
; 0000 009C  case '5': { k = k*10+5; break;}
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
; 0000 009D  case '6': { k = k*10+6; break;}
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
; 0000 009E  case '7': { k = k*10+7; break;}
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
; 0000 009F  case '8': { k = k*10+8; break;}
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
; 0000 00A0  case '9': { k = k*10+9; break;}
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
; 0000 00A1  case '0': { k = k*10+0; break;}
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
; 0000 00A2  default:{ i--; printf("NO"); }
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
; 0000 00A3 }
;PCODE: $000000D8 VOL: 0
; 0000 00A4 }
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
; 0000 00A5 
; 0000 00A6 return k;
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
; 0000 00A7 }
;PCODE: $000000E2 VOL: 0
;
;void Set_Fan(unsigned char num, unsigned char status)   //Óñòàíàâëèâàåò ñòàòóñ êóëëåðà num - íîìåð êóëëåðà, status - âêë/âûêë
; 0000 00AA {
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
; 0000 00AB switch (num)
;	num -> Y+1
;	status -> Y+0
;PCODE: $000000E5 VOL: 0
; 0000 00AC {
; 0000 00AD         case 1:
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
; 0000 00AE         {
; 0000 00AF         if (status == Off)
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
; 0000 00B0                 {
; 0000 00B1                 PORTD.2=Off;
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
; 0000 00B2                 Fan1_Status=Off;
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
; 0000 00B3                 } else
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
; 0000 00B4                 {
; 0000 00B5                 PORTD.2=On;
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
; 0000 00B6                 Fan1_Status=On;
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
; 0000 00B7                 }
;PCODE: $00000105 VOL: 0
; 0000 00B8         break;
;PCODE: $00000106 VOL: 0
; 0000 00B9         }
; 0000 00BA         case 2:
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 0
; 0000 00BB         {
; 0000 00BC         if (status == Off)
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
; 0000 00BD                 {
; 0000 00BE                 PORTD.3=Off;
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
; 0000 00BF                 Fan2_Status=Off;
;PCODE: $00000117 VOL: 0
;PCODE: $00000118 VOL: 0
; 0000 00C0                 } else
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
; 0000 00C1                 {
; 0000 00C2                 PORTD.3=On;
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 0
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
; 0000 00C3                 Fan2_Status=On;
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
; 0000 00C4                 }
;PCODE: $00000127 VOL: 0
; 0000 00C5         break;
;PCODE: $00000128 VOL: 0
; 0000 00C6         }
; 0000 00C7         case 3:
;PCODE: $00000129 VOL: 0
;PCODE: $0000012A VOL: 0
;PCODE: $0000012B VOL: 0
; 0000 00C8         {
; 0000 00C9         if (status == Off)
;PCODE: $0000012C VOL: 0
;PCODE: $0000012D VOL: 0
;PCODE: $0000012E VOL: 0
; 0000 00CA                 {
; 0000 00CB                 PORTD.4=Off;
;PCODE: $0000012F VOL: 0
;PCODE: $00000130 VOL: 0
;PCODE: $00000131 VOL: 0
;PCODE: $00000132 VOL: 0
;PCODE: $00000133 VOL: 0
;PCODE: $00000134 VOL: 0
;PCODE: $00000135 VOL: 0
;PCODE: $00000136 VOL: 0
;PCODE: $00000137 VOL: 0
;PCODE: $00000138 VOL: 0
; 0000 00CC                 Fan3_Status=Off;
;PCODE: $00000139 VOL: 0
;PCODE: $0000013A VOL: 0
; 0000 00CD                 } else
;PCODE: $0000013B VOL: 0
;PCODE: $0000013C VOL: 0
; 0000 00CE                 {
; 0000 00CF                 PORTD.4=On;
;PCODE: $0000013D VOL: 0
;PCODE: $0000013E VOL: 0
;PCODE: $0000013F VOL: 0
;PCODE: $00000140 VOL: 0
;PCODE: $00000141 VOL: 0
;PCODE: $00000142 VOL: 0
;PCODE: $00000143 VOL: 0
;PCODE: $00000144 VOL: 0
;PCODE: $00000145 VOL: 0
;PCODE: $00000146 VOL: 0
; 0000 00D0                 Fan3_Status=On;
;PCODE: $00000147 VOL: 0
;PCODE: $00000148 VOL: 0
; 0000 00D1                 }
;PCODE: $00000149 VOL: 0
; 0000 00D2         break;
;PCODE: $0000014A VOL: 0
; 0000 00D3         }
; 0000 00D4 
; 0000 00D5 }
;PCODE: $0000014B VOL: 0
; 0000 00D6 
; 0000 00D7 }
;PCODE: $0000014C VOL: 0
;PCODE: $0000014D VOL: 0
;PCODE: $0000014E VOL: 0
;
;void Set_PWM_Value(unsigned char num, unsigned  int PWM)//Óñòàíàâëèâàåò âåëè÷èíó ØÈÌ íàãðåâàòåëÿ num - íîìåð íàãðåâàòåëÿ, PWM - âåëè÷èíà ØÈÌ
; 0000 00DA {
;PCODE: $0000014F VOL: 0
;PCODE: $00000150 VOL: 0
; 0000 00DB switch (num)
;	num -> Y+2
;	PWM -> Y+0
;PCODE: $00000151 VOL: 0
; 0000 00DC {
; 0000 00DD case 1:
;PCODE: $00000152 VOL: 0
;PCODE: $00000153 VOL: 0
; 0000 00DE         {
; 0000 00DF         PWM1_Value=PWM;
;PCODE: $00000154 VOL: 0
;PCODE: $00000155 VOL: 0
; 0000 00E0         OCR1AH=(unsigned char) (PWM1_Value>>8);
;PCODE: $00000156 VOL: 0
;PCODE: $00000157 VOL: 0
;PCODE: $00000158 VOL: 0
; 0000 00E1         OCR1AL=(unsigned char) (PWM1_Value);
;PCODE: $00000159 VOL: 0
;PCODE: $0000015A VOL: 0
; 0000 00E2         break;
;PCODE: $0000015B VOL: 0
; 0000 00E3         }
; 0000 00E4 case 2:
;PCODE: $0000015C VOL: 0
;PCODE: $0000015D VOL: 0
;PCODE: $0000015E VOL: 0
; 0000 00E5         {
; 0000 00E6         PWM2_Value=PWM;
;PCODE: $0000015F VOL: 0
;PCODE: $00000160 VOL: 0
; 0000 00E7         OCR1BH=(unsigned char) (PWM2_Value>>8);
;PCODE: $00000161 VOL: 0
;PCODE: $00000162 VOL: 0
;PCODE: $00000163 VOL: 0
; 0000 00E8         OCR1BL=(unsigned char) (PWM2_Value);
;PCODE: $00000164 VOL: 0
;PCODE: $00000165 VOL: 0
; 0000 00E9         break;}
;PCODE: $00000166 VOL: 0
; 0000 00EA }
;PCODE: $00000167 VOL: 0
; 0000 00EB }
;PCODE: $00000168 VOL: 0
;PCODE: $00000169 VOL: 0
;PCODE: $0000016A VOL: 0
;
;unsigned char Get_Fan_Status(unsigned char num) // Âîçâðàùàåò ñòàòóñ êóëëåðà, num - íîìåð êóëëåðà
; 0000 00EE {
;PCODE: $0000016B VOL: 0
;PCODE: $0000016C VOL: 0
; 0000 00EF switch (num)
;	num -> Y+0
;PCODE: $0000016D VOL: 0
; 0000 00F0 {
; 0000 00F1         case 1:return Fan1_Status;
;PCODE: $0000016E VOL: 0
;PCODE: $0000016F VOL: 0
;PCODE: $00000170 VOL: 0
;PCODE: $00000171 VOL: 0
;PCODE: $00000172 VOL: 0
; 0000 00F2         case 2:return Fan2_Status;
;PCODE: $00000173 VOL: 0
;PCODE: $00000174 VOL: 0
;PCODE: $00000175 VOL: 0
;PCODE: $00000176 VOL: 0
;PCODE: $00000177 VOL: 0
;PCODE: $00000178 VOL: 0
; 0000 00F3         case 3:return Fan3_Status;
;PCODE: $00000179 VOL: 0
;PCODE: $0000017A VOL: 0
;PCODE: $0000017B VOL: 0
;PCODE: $0000017C VOL: 0
;PCODE: $0000017D VOL: 0
;PCODE: $0000017E VOL: 0
; 0000 00F4  break;
;PCODE: $0000017F VOL: 0
; 0000 00F5 }
;PCODE: $00000180 VOL: 0
; 0000 00F6 
; 0000 00F7 }
;PCODE: $00000181 VOL: 0
;PCODE: $00000182 VOL: 0
;PCODE: $00000183 VOL: 0
;
;unsigned int Get_PWM(unsigned char num)        // Âîçâðàùàåò âåëè÷èíó ØÈÌ íàãðåâàòåëÿ, num - íîìåð íàãðåâàòåëÿ
; 0000 00FA {
;PCODE: $00000184 VOL: 0
;PCODE: $00000185 VOL: 0
; 0000 00FB switch (num)
;	num -> Y+0
;PCODE: $00000186 VOL: 0
; 0000 00FC {
; 0000 00FD         case 1:return PWM1_Value;
;PCODE: $00000187 VOL: 0
;PCODE: $00000188 VOL: 0
;PCODE: $00000189 VOL: 0
;PCODE: $0000018A VOL: 0
;PCODE: $0000018B VOL: 0
; 0000 00FE         case 2:return PWM2_Value;
;PCODE: $0000018C VOL: 0
;PCODE: $0000018D VOL: 0
;PCODE: $0000018E VOL: 0
;PCODE: $0000018F VOL: 0
;PCODE: $00000190 VOL: 0
;PCODE: $00000191 VOL: 0
; 0000 00FF 
; 0000 0100 }
;PCODE: $00000192 VOL: 0
; 0000 0101 }
;PCODE: $00000193 VOL: 0
;PCODE: $00000194 VOL: 0
;PCODE: $00000195 VOL: 0
;
;unsigned char Get_Tmp(unsigned char num)       //Âîçâðàùàåò çíà÷åíèå òåìïåðàòóðû òåðìîïàðû, num - íîìåð òåðìîïàðû
; 0000 0104 {
;PCODE: $00000196 VOL: 0
;PCODE: $00000197 VOL: 0
; 0000 0105 switch (num)
;	num -> Y+0
;PCODE: $00000198 VOL: 0
; 0000 0106 {
; 0000 0107         case 1:{Tmp1_Value=adc_data[0]; return Tmp1_Value;}
;PCODE: $00000199 VOL: 0
;PCODE: $0000019A VOL: 0
;PCODE: $0000019B VOL: 0
;PCODE: $0000019C VOL: 0
;PCODE: $0000019D VOL: 0
;PCODE: $0000019E VOL: 0
;PCODE: $0000019F VOL: 0
; 0000 0108         case 2:{Tmp2_Value=adc_data[1]; return Tmp2_Value;}
;PCODE: $000001A0 VOL: 0
;PCODE: $000001A1 VOL: 0
;PCODE: $000001A2 VOL: 0
;PCODE: $000001A3 VOL: 0
;PCODE: $000001A4 VOL: 0
;PCODE: $000001A5 VOL: 0
;PCODE: $000001A6 VOL: 0
;PCODE: $000001A7 VOL: 0
;PCODE: $000001A8 VOL: 0
; 0000 0109         default:;
;PCODE: $000001A9 VOL: 0
; 0000 010A break;
;PCODE: $000001AA VOL: 0
; 0000 010B }
;PCODE: $000001AB VOL: 0
; 0000 010C }
;PCODE: $000001AC VOL: 0
;PCODE: $000001AD VOL: 0
;PCODE: $000001AE VOL: 0
;
;
;void UART(void)
; 0000 0110 {
;PCODE: $000001AF VOL: 0
;PCODE: $000001B0 VOL: 0
; 0000 0111 unsigned int buff=0;
; 0000 0112 unsigned int buff1=0;
; 0000 0113 unsigned int buff2=0;
; 0000 0114 unsigned int buff3=0;
; 0000 0115 unsigned int f=0;
; 0000 0116 unsigned int p=0;
; 0000 0117 unsigned int t=0;
; 0000 0118 
; 0000 0119 if (rx_counter)
;PCODE: $000001B1 VOL: 0
;PCODE: $000001B2 VOL: 0
;PCODE: $000001B3 VOL: 0
;PCODE: $000001B4 VOL: 0
;PCODE: $000001B5 VOL: 0
;PCODE: $000001B6 VOL: 0
;PCODE: $000001B7 VOL: 0
;PCODE: $000001B8 VOL: 0
;PCODE: $000001B9 VOL: 0
;PCODE: $000001BA VOL: 0
;PCODE: $000001BB VOL: 0
;PCODE: $000001BC VOL: 0
;PCODE: $000001BD VOL: 0
;PCODE: $000001BE VOL: 0
;PCODE: $000001BF VOL: 0
;PCODE: $000001C0 VOL: 0
;PCODE: $000001C1 VOL: 0
;PCODE: $000001C2 VOL: 0
;	buff -> R16,R17
;	buff1 -> R18,R19
;	buff2 -> R20,R21
;	buff3 -> Y+12
;	f -> Y+10
;	p -> Y+8
;	t -> Y+6
;PCODE: $000001C3 VOL: 0
;PCODE: $000001C4 VOL: 0
;PCODE: $000001C5 VOL: 0
;PCODE: $000001C6 VOL: 0
;PCODE: $000001C7 VOL: 0
;PCODE: $000001C8 VOL: 0
;PCODE: $000001C9 VOL: 0
;PCODE: $000001CA VOL: 0
; 0000 011A {
; 0000 011B         buff = getchar();
;PCODE: $000001CB VOL: 0
;PCODE: $000001CC VOL: 0
;PCODE: $000001CD VOL: 0
; 0000 011C         if (buff == '#')
;PCODE: $000001CE VOL: 0
;PCODE: $000001CF VOL: 0
;PCODE: $000001D0 VOL: 0
; 0000 011D         {                                      //Íà÷àëî  ïðèåìà êîìàíäû
; 0000 011E 
; 0000 011F         buff1 = enterchar();                    // Îïðåäåëÿåì òèï êîìàíäû SET/GET
;PCODE: $000001D1 VOL: 0
;PCODE: $000001D2 VOL: 0
;PCODE: $000001D3 VOL: 0
; 0000 0120         switch (buff1)
;PCODE: $000001D4 VOL: 0
; 0000 0121         {
; 0000 0122                 case 'S':
;PCODE: $000001D5 VOL: 0
;PCODE: $000001D6 VOL: 0
; 0000 0123                  {                             // Îïðåäåëÿåì óñòàíàâëèâàåìûé ïàðàìåòð Fan/PWM
; 0000 0124                  buff2 = enterchar();
;PCODE: $000001D7 VOL: 0
;PCODE: $000001D8 VOL: 0
;PCODE: $000001D9 VOL: 0
; 0000 0125                  switch (buff2)
;PCODE: $000001DA VOL: 0
; 0000 0126                    {
; 0000 0127                         case 'F': { Set_Fan(((unsigned char) enterdata(1)),((unsigned char) enterdata(1))); printf("OK"); break;}
;PCODE: $000001DB VOL: 0
;PCODE: $000001DC VOL: 0
;PCODE: $000001DD VOL: 0
;PCODE: $000001DE VOL: 0
;PCODE: $000001DF VOL: 0
;PCODE: $000001E0 VOL: 0
;PCODE: $000001E1 VOL: 0
;PCODE: $000001E2 VOL: 0
;PCODE: $000001E3 VOL: 0
;PCODE: $000001E4 VOL: 0
;PCODE: $000001E5 VOL: 0
;PCODE: $000001E6 VOL: 0
;PCODE: $000001E7 VOL: 0
;PCODE: $000001E8 VOL: 0
;PCODE: $000001E9 VOL: 0
;PCODE: $000001EA VOL: 0
;PCODE: $000001EB VOL: 0
;PCODE: $000001EC VOL: 0
;PCODE: $000001ED VOL: 0
; 0000 0128                         case 'P': { Set_PWM_Value(((unsigned char) enterdata(1)),(enterdata(4))); printf("OK"); break;}
;PCODE: $000001EE VOL: 0
;PCODE: $000001EF VOL: 0
;PCODE: $000001F0 VOL: 0
;PCODE: $000001F1 VOL: 0
;PCODE: $000001F2 VOL: 0
;PCODE: $000001F3 VOL: 0
;PCODE: $000001F4 VOL: 0
;PCODE: $000001F5 VOL: 0
;PCODE: $000001F6 VOL: 0
;PCODE: $000001F7 VOL: 0
;PCODE: $000001F8 VOL: 0
;PCODE: $000001F9 VOL: 0
;PCODE: $000001FA VOL: 0
;PCODE: $000001FB VOL: 0
;PCODE: $000001FC VOL: 0
;PCODE: $000001FD VOL: 0
;PCODE: $000001FE VOL: 0
;PCODE: $000001FF VOL: 0
;PCODE: $00000200 VOL: 0
;PCODE: $00000201 VOL: 0
; 0000 0129                         default:printf("NO");
;PCODE: $00000202 VOL: 0
;PCODE: $00000203 VOL: 0
;PCODE: $00000204 VOL: 0
;PCODE: $00000205 VOL: 0
;PCODE: $00000206 VOL: 0
;PCODE: $00000207 VOL: 0
;PCODE: $00000208 VOL: 0
;PCODE: $00000209 VOL: 0
; 0000 012A                    }
;PCODE: $0000020A VOL: 0
; 0000 012B                  break;
;PCODE: $0000020B VOL: 0
; 0000 012C                  }
; 0000 012D 
; 0000 012E 
; 0000 012F                  case 'G':                      // Îïðåäåëÿåì çàïðàøèâàåìûé ïàðàìåòð Fan/PWM/Tmp
;PCODE: $0000020C VOL: 0
;PCODE: $0000020D VOL: 0
;PCODE: $0000020E VOL: 0
; 0000 0130                  {
; 0000 0131                  buff3 = enterchar();
;PCODE: $0000020F VOL: 0
;PCODE: $00000210 VOL: 0
;PCODE: $00000211 VOL: 0
; 0000 0132                  switch (buff3)
;PCODE: $00000212 VOL: 0
; 0000 0133                    {
; 0000 0134                         case 'F': { f=enterdata(1); printf("F%d%d",f,Get_Fan_Status(f)); break;}
;PCODE: $00000213 VOL: 0
;PCODE: $00000214 VOL: 0
;PCODE: $00000215 VOL: 0
;PCODE: $00000216 VOL: 0
;PCODE: $00000217 VOL: 0
;PCODE: $00000218 VOL: 0
;PCODE: $00000219 VOL: 0
;PCODE: $0000021A VOL: 0
;PCODE: $0000021B VOL: 0
;PCODE: $0000021C VOL: 0
;PCODE: $0000021D VOL: 0
;PCODE: $0000021E VOL: 0
;PCODE: $0000021F VOL: 0
;PCODE: $00000220 VOL: 0
;PCODE: $00000221 VOL: 0
;PCODE: $00000222 VOL: 0
;PCODE: $00000223 VOL: 0
;PCODE: $00000224 VOL: 0
;PCODE: $00000225 VOL: 0
;PCODE: $00000226 VOL: 0
;PCODE: $00000227 VOL: 0
;PCODE: $00000228 VOL: 0
; 0000 0135                         case 'P': { p=enterdata(1); printf("P%d%04d",p,Get_PWM(p)); break;}
;PCODE: $00000229 VOL: 0
;PCODE: $0000022A VOL: 0
;PCODE: $0000022B VOL: 0
;PCODE: $0000022C VOL: 0
;PCODE: $0000022D VOL: 0
;PCODE: $0000022E VOL: 0
;PCODE: $0000022F VOL: 0
;PCODE: $00000230 VOL: 0
;PCODE: $00000231 VOL: 0
;PCODE: $00000232 VOL: 0
;PCODE: $00000233 VOL: 0
;PCODE: $00000234 VOL: 0
;PCODE: $00000235 VOL: 0
;PCODE: $00000236 VOL: 0
;PCODE: $00000237 VOL: 0
;PCODE: $00000238 VOL: 0
;PCODE: $00000239 VOL: 0
;PCODE: $0000023A VOL: 0
;PCODE: $0000023B VOL: 0
;PCODE: $0000023C VOL: 0
;PCODE: $0000023D VOL: 0
;PCODE: $0000023E VOL: 0
;PCODE: $0000023F VOL: 0
; 0000 0136                         case 'T': { t=enterdata(1); printf("T%d%03d",t,Get_Tmp(t));  break;}
;PCODE: $00000240 VOL: 0
;PCODE: $00000241 VOL: 0
;PCODE: $00000242 VOL: 0
;PCODE: $00000243 VOL: 0
;PCODE: $00000244 VOL: 0
;PCODE: $00000245 VOL: 0
;PCODE: $00000246 VOL: 0
;PCODE: $00000247 VOL: 0
;PCODE: $00000248 VOL: 0
;PCODE: $00000249 VOL: 0
;PCODE: $0000024A VOL: 0
;PCODE: $0000024B VOL: 0
;PCODE: $0000024C VOL: 0
;PCODE: $0000024D VOL: 0
;PCODE: $0000024E VOL: 0
;PCODE: $0000024F VOL: 0
;PCODE: $00000250 VOL: 0
;PCODE: $00000251 VOL: 0
;PCODE: $00000252 VOL: 0
;PCODE: $00000253 VOL: 0
;PCODE: $00000254 VOL: 0
;PCODE: $00000255 VOL: 0
;PCODE: $00000256 VOL: 0
; 0000 0137                         default:printf("NO");
;PCODE: $00000257 VOL: 0
;PCODE: $00000258 VOL: 0
;PCODE: $00000259 VOL: 0
;PCODE: $0000025A VOL: 0
;PCODE: $0000025B VOL: 0
;PCODE: $0000025C VOL: 0
;PCODE: $0000025D VOL: 0
;PCODE: $0000025E VOL: 0
; 0000 0138                    }
;PCODE: $0000025F VOL: 0
; 0000 0139                   break;
;PCODE: $00000260 VOL: 0
; 0000 013A                  }
; 0000 013B             default:printf("NO");
;PCODE: $00000261 VOL: 0
;PCODE: $00000262 VOL: 0
;PCODE: $00000263 VOL: 0
;PCODE: $00000264 VOL: 0
;PCODE: $00000265 VOL: 0
;PCODE: $00000266 VOL: 0
;PCODE: $00000267 VOL: 0
;PCODE: $00000268 VOL: 0
; 0000 013C         }
;PCODE: $00000269 VOL: 0
; 0000 013D         }   else printf("NO");
;PCODE: $0000026A VOL: 0
;PCODE: $0000026B VOL: 0
;PCODE: $0000026C VOL: 0
;PCODE: $0000026D VOL: 0
;PCODE: $0000026E VOL: 0
;PCODE: $0000026F VOL: 0
;PCODE: $00000270 VOL: 0
;PCODE: $00000271 VOL: 0
;PCODE: $00000272 VOL: 0
; 0000 013E }
;PCODE: $00000273 VOL: 0
; 0000 013F }
;PCODE: $00000274 VOL: 0
;PCODE: $00000275 VOL: 0
;PCODE: $00000276 VOL: 0
;PCODE: $00000277 VOL: 0
;PCODE: $00000278 VOL: 0
;
;
;void main(void)
; 0000 0143 {
;PCODE: $00000279 VOL: 0
; 0000 0144 // Declare your local variables here
; 0000 0145 
; 0000 0146 // Input/Output Ports initialization
; 0000 0147 // Port B initialization
; 0000 0148 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=Out Func1=Out Func0=In
; 0000 0149 // State7=T State6=T State5=T State4=T State3=T State2=0 State1=0 State0=T
; 0000 014A PORTB=0x00;
;PCODE: $0000027A VOL: 0
;PCODE: $0000027B VOL: 0
; 0000 014B DDRB=0x06;
;PCODE: $0000027C VOL: 0
;PCODE: $0000027D VOL: 0
; 0000 014C 
; 0000 014D // Port C initialization
; 0000 014E // Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 014F // State6=P State5=P State4=P State3=T State2=T State1=P State0=P
; 0000 0150 PORTC=0x73;
;PCODE: $0000027E VOL: 0
;PCODE: $0000027F VOL: 0
; 0000 0151 DDRC=0x00;
;PCODE: $00000280 VOL: 0
;PCODE: $00000281 VOL: 0
; 0000 0152 
; 0000 0153 // Port D initialization
; 0000 0154 // Func7=In Func6=In Func5=In Func4=Out Func3=Out Func2=Out Func1=Out Func0=In
; 0000 0155 // State7=T State6=T State5=T State4=0 State3=0 State2=0 State1=0 State0=T
; 0000 0156 PORTD=0x00;
;PCODE: $00000282 VOL: 0
;PCODE: $00000283 VOL: 0
; 0000 0157 DDRD=0x1E;
;PCODE: $00000284 VOL: 0
;PCODE: $00000285 VOL: 0
; 0000 0158 
; 0000 0159 // Timer/Counter 0 initialization
; 0000 015A // Clock source: System Clock
; 0000 015B // Clock value: Timer 0 Stopped
; 0000 015C TCCR0=0x00;
;PCODE: $00000286 VOL: 0
;PCODE: $00000287 VOL: 0
; 0000 015D TCNT0=0x00;
;PCODE: $00000288 VOL: 0
;PCODE: $00000289 VOL: 0
; 0000 015E 
; 0000 015F 
; 0000 0160 
; 0000 0161 // Timer/Counter 1 initialization
; 0000 0162 // Clock source: System Clock
; 0000 0163 // Clock value: 5120,000 kHz
; 0000 0164 // Mode: Ph. correct PWM top=03FFh
; 0000 0165 // OC1A output: Inverted
; 0000 0166 // OC1B output: Inverted
; 0000 0167 // Noise Canceler: Off
; 0000 0168 // Input Capture on Falling Edge
; 0000 0169 // Timer1 Overflow Interrupt: Off
; 0000 016A // Input Capture Interrupt: Off
; 0000 016B // Compare A Match Interrupt: Off
; 0000 016C // Compare B Match Interrupt: Off
; 0000 016D TCCR1A=0xF3;
;PCODE: $0000028A VOL: 0
;PCODE: $0000028B VOL: 0
; 0000 016E TCCR1B=0x01;
;PCODE: $0000028C VOL: 0
;PCODE: $0000028D VOL: 0
; 0000 016F TCNT1H=0x00;
;PCODE: $0000028E VOL: 0
;PCODE: $0000028F VOL: 0
; 0000 0170 TCNT1L=0x00;
;PCODE: $00000290 VOL: 0
;PCODE: $00000291 VOL: 0
; 0000 0171 ICR1H=0x00;
;PCODE: $00000292 VOL: 0
;PCODE: $00000293 VOL: 0
; 0000 0172 ICR1L=0x00;
;PCODE: $00000294 VOL: 0
;PCODE: $00000295 VOL: 0
; 0000 0173 OCR1AH=0x00;
;PCODE: $00000296 VOL: 0
;PCODE: $00000297 VOL: 0
; 0000 0174 OCR1AL=0x00;
;PCODE: $00000298 VOL: 0
;PCODE: $00000299 VOL: 0
; 0000 0175 OCR1BH=0x00;
;PCODE: $0000029A VOL: 0
;PCODE: $0000029B VOL: 0
; 0000 0176 OCR1BL=0x00;
;PCODE: $0000029C VOL: 0
;PCODE: $0000029D VOL: 0
; 0000 0177 
; 0000 0178 // Timer/Counter 2 initialization
; 0000 0179 // Clock source: System Clock
; 0000 017A // Clock value: Timer 2 Stopped
; 0000 017B // Mode: Normal top=FFh
; 0000 017C // OC2 output: Disconnected
; 0000 017D ASSR=0x00;
;PCODE: $0000029E VOL: 0
;PCODE: $0000029F VOL: 0
; 0000 017E TCCR2=0x00;
;PCODE: $000002A0 VOL: 0
;PCODE: $000002A1 VOL: 0
; 0000 017F TCNT2=0x00;
;PCODE: $000002A2 VOL: 0
;PCODE: $000002A3 VOL: 0
; 0000 0180 OCR2=0x00;
;PCODE: $000002A4 VOL: 0
;PCODE: $000002A5 VOL: 0
; 0000 0181 
; 0000 0182 // External Interrupt(s) initialization
; 0000 0183 // INT0: Off
; 0000 0184 // INT1: Off
; 0000 0185 MCUCR=0x00;
;PCODE: $000002A6 VOL: 0
;PCODE: $000002A7 VOL: 0
; 0000 0186 
; 0000 0187 // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 0188 TIMSK=0x00;
;PCODE: $000002A8 VOL: 0
;PCODE: $000002A9 VOL: 0
; 0000 0189 
; 0000 018A 
; 0000 018B // USART initialization
; 0000 018C // Communication Parameters: 8 Data, 1 Stop, No Parity
; 0000 018D // USART Receiver: On
; 0000 018E // USART Transmitter: On
; 0000 018F // USART Mode: Asynchronous
; 0000 0190 // USART Baud Rate: 9600
; 0000 0191 UCSRA=0x00;
;PCODE: $000002AA VOL: 0
;PCODE: $000002AB VOL: 0
; 0000 0192 UCSRB=0x98;
;PCODE: $000002AC VOL: 0
;PCODE: $000002AD VOL: 0
; 0000 0193 UCSRC=0x86;
;PCODE: $000002AE VOL: 0
;PCODE: $000002AF VOL: 0
; 0000 0194 UBRRH=0x00;
;PCODE: $000002B0 VOL: 0
;PCODE: $000002B1 VOL: 0
; 0000 0195 UBRRL=0x20;
;PCODE: $000002B2 VOL: 0
;PCODE: $000002B3 VOL: 0
; 0000 0196 
; 0000 0197 
; 0000 0198 
; 0000 0199 // Analog Comparator initialization
; 0000 019A // Analog Comparator: Off
; 0000 019B // Analog Comparator Input Capture by Timer/Counter 1: Off
; 0000 019C ACSR=0x80;
;PCODE: $000002B4 VOL: 0
;PCODE: $000002B5 VOL: 0
; 0000 019D SFIOR=0x00;
;PCODE: $000002B6 VOL: 0
;PCODE: $000002B7 VOL: 0
; 0000 019E 
; 0000 019F 
; 0000 01A0 // ADC initialization
; 0000 01A1 // ADC Clock frequency: 160,000 kHz
; 0000 01A2 // ADC Voltage Reference: AREF pin
; 0000 01A3 // Only the 8 most significant bits of
; 0000 01A4 // the AD conversion result are used
; 0000 01A5 ADMUX=FIRST_ADC_INPUT | (ADC_VREF_TYPE & 0xff);
;PCODE: $000002B8 VOL: 0
;PCODE: $000002B9 VOL: 0
; 0000 01A6 ADCSRA=0xCD;
;PCODE: $000002BA VOL: 0
;PCODE: $000002BB VOL: 0
; 0000 01A7 ADCSRA|=0x40;
;PCODE: $000002BC VOL: 0
;PCODE: $000002BD VOL: 0
; 0000 01A8 
; 0000 01A9 // Global enable interrupts
; 0000 01AA #asm("sei")
;PCODE: $000002BE VOL: 0
	sei
;PCODE: $000002BF VOL: 0
; 0000 01AB 
; 0000 01AC 
; 0000 01AD 
; 0000 01AE Set_Fan(2,1);
;PCODE: $000002C0 VOL: 0
;PCODE: $000002C1 VOL: 0
;PCODE: $000002C2 VOL: 0
;PCODE: $000002C3 VOL: 0
;PCODE: $000002C4 VOL: 0
; 0000 01AF Set_PWM_Value(1,1023);
;PCODE: $000002C5 VOL: 0
;PCODE: $000002C6 VOL: 0
;PCODE: $000002C7 VOL: 0
;PCODE: $000002C8 VOL: 0
;PCODE: $000002C9 VOL: 0
; 0000 01B0 Set_PWM_Value(2,1023);
;PCODE: $000002CA VOL: 0
;PCODE: $000002CB VOL: 0
;PCODE: $000002CC VOL: 0
;PCODE: $000002CD VOL: 0
;PCODE: $000002CE VOL: 0
; 0000 01B1 
; 0000 01B2 while (1)
;PCODE: $000002CF VOL: 0
; 0000 01B3         {
; 0000 01B4 
; 0000 01B5    UART();
;PCODE: $000002D0 VOL: 0
; 0000 01B6 
; 0000 01B7 
; 0000 01B8 
; 0000 01B9         }
;PCODE: $000002D1 VOL: 0
;PCODE: $000002D2 VOL: 0
; 0000 01BA }
;PCODE: $000002D3 VOL: 0
;PCODE: $000002D4 VOL: 0
;PCODE: $000002D5 VOL: 0
